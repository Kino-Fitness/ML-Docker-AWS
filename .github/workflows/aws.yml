name: Deploy to Amazon ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: kino-fitness-images
  ECS_SERVICE: 3dModelAPIService
  ECS_CLUSTER: KinoFitnessCluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  ECS_TASK_DEFINITION_FAMILY: 3dModelAPI
  CONTAINER_NAME: KinoFitnessContainer
  ECR_REGISTRY: public.ecr.aws/v1i9d3i6

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create .env for S3
    run: |
      echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
      echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
      echo "DB_HOST_IP=${{ secrets.DB_HOST_IP }}" >> .env
      echo "DB_USER=${{ secrets.DB_USER }}" >> .env
      echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
      echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
      echo "DB_PORT_NUMBER=${{ secrets.DB_PORT_NUMBER }}" >> .env



    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build, tag, and push image to Amazon ECR Public
      id: build-image
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Register new ECS task definition
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
    
    - name: Update ECS service with new task definition
      run: |
        if [ -z "$NEW_TASK_DEF_ARN" ]; then
          echo "Failed to get new task definition ARN"
          exit 1
        fi
        echo "Using new task definition: $NEW_TASK_DEF_ARN"
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEF_ARN --force-new-deployment --desired-count 1

    - name: Stop old tasks
      run: |
        OLD_TASK_IDS=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --desired-status RUNNING --query 'taskArns[*]' --output text)
        for TASK_ID in $OLD_TASK_IDS; do
          if [[ $TASK_ID != *$NEW_TASK_DEF_ARN* ]]; then
            echo "Stopping old task: $TASK_ID"
            aws ecs stop-task --cluster ${{ env.ECS_CLUSTER }} --task $TASK_ID
          fi
        done
